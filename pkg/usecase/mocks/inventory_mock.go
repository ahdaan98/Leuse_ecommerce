// Code generated by MockGen. DO NOT EDIT.
// Source: C:\Users\ahdaa\GOLANG\Leuse_Ecommerce\pkg\usecase\interface\inventory.go

// Package mock_interfaces is a generated GoMock package.
package mock_interfaces

import (
	reflect "reflect"

	models "github.com/ahdaan98/pkg/utils/models"
	gomock "github.com/golang/mock/gomock"
)

// MockInventoryUseCase is a mock of InventoryUseCase interface.
type MockInventoryUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockInventoryUseCaseMockRecorder
}

// MockInventoryUseCaseMockRecorder is the mock recorder for MockInventoryUseCase.
type MockInventoryUseCaseMockRecorder struct {
	mock *MockInventoryUseCase
}

// NewMockInventoryUseCase creates a new mock instance.
func NewMockInventoryUseCase(ctrl *gomock.Controller) *MockInventoryUseCase {
	mock := &MockInventoryUseCase{ctrl: ctrl}
	mock.recorder = &MockInventoryUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInventoryUseCase) EXPECT() *MockInventoryUseCaseMockRecorder {
	return m.recorder
}

// AddImage mocks base method.
func (m *MockInventoryUseCase) AddImage(id int, image string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddImage", id, image)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddImage indicates an expected call of AddImage.
func (mr *MockInventoryUseCaseMockRecorder) AddImage(id, image interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddImage", reflect.TypeOf((*MockInventoryUseCase)(nil).AddImage), id, image)
}

// AddInventory mocks base method.
func (m *MockInventoryUseCase) AddInventory(inventory models.AddInventory) (models.InventoryResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddInventory", inventory)
	ret0, _ := ret[0].(models.InventoryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddInventory indicates an expected call of AddInventory.
func (mr *MockInventoryUseCaseMockRecorder) AddInventory(inventory interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddInventory", reflect.TypeOf((*MockInventoryUseCase)(nil).AddInventory), inventory)
}

// CheckStock mocks base method.
func (m *MockInventoryUseCase) CheckStock(productID int) (models.CheckStockResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckStock", productID)
	ret0, _ := ret[0].(models.CheckStockResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckStock indicates an expected call of CheckStock.
func (mr *MockInventoryUseCaseMockRecorder) CheckStock(productID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckStock", reflect.TypeOf((*MockInventoryUseCase)(nil).CheckStock), productID)
}

// EditInventory mocks base method.
func (m *MockInventoryUseCase) EditInventory(inventory models.EditInventory, id int) (models.InventoryResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditInventory", inventory, id)
	ret0, _ := ret[0].(models.InventoryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EditInventory indicates an expected call of EditInventory.
func (mr *MockInventoryUseCaseMockRecorder) EditInventory(inventory, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditInventory", reflect.TypeOf((*MockInventoryUseCase)(nil).EditInventory), inventory, id)
}

// ListProducts mocks base method.
func (m *MockInventoryUseCase) ListProducts(page, per_product int) ([]models.InventoryResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListProducts", page, per_product)
	ret0, _ := ret[0].([]models.InventoryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListProducts indicates an expected call of ListProducts.
func (mr *MockInventoryUseCaseMockRecorder) ListProducts(page, per_product interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProducts", reflect.TypeOf((*MockInventoryUseCase)(nil).ListProducts), page, per_product)
}

// ListProductsWithImages mocks base method.
func (m *MockInventoryUseCase) ListProductsWithImages(page, per_product int) ([]models.InventoryResponseWithImages, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListProductsWithImages", page, per_product)
	ret0, _ := ret[0].([]models.InventoryResponseWithImages)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListProductsWithImages indicates an expected call of ListProductsWithImages.
func (mr *MockInventoryUseCaseMockRecorder) ListProductsWithImages(page, per_product interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProductsWithImages", reflect.TypeOf((*MockInventoryUseCase)(nil).ListProductsWithImages), page, per_product)
}

// ShowIndividualProduct mocks base method.
func (m *MockInventoryUseCase) ShowIndividualProduct(productID int) (models.InventoryResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShowIndividualProduct", productID)
	ret0, _ := ret[0].(models.InventoryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ShowIndividualProduct indicates an expected call of ShowIndividualProduct.
func (mr *MockInventoryUseCaseMockRecorder) ShowIndividualProduct(productID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShowIndividualProduct", reflect.TypeOf((*MockInventoryUseCase)(nil).ShowIndividualProduct), productID)
}

// UpdateInventory mocks base method.
func (m *MockInventoryUseCase) UpdateInventory(inventory models.UpdateInventory, id int) (models.InventoryResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateInventory", inventory, id)
	ret0, _ := ret[0].(models.InventoryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateInventory indicates an expected call of UpdateInventory.
func (mr *MockInventoryUseCaseMockRecorder) UpdateInventory(inventory, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateInventory", reflect.TypeOf((*MockInventoryUseCase)(nil).UpdateInventory), inventory, id)
}
