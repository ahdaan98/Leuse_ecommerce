// Code generated by MockGen. DO NOT EDIT.
// Source: C:\Users\ahdaa\GOLANG\Leuse_Ecommerce\pkg\usecase\interface\brand.go

// Package mock_interfaces is a generated GoMock package.
package mock_interfaces

import (
	reflect "reflect"

	domain "github.com/ahdaan98/pkg/domain"
	models "github.com/ahdaan98/pkg/utils/models"
	gomock "github.com/golang/mock/gomock"
)

// MockBrandUseCase is a mock of BrandUseCase interface.
type MockBrandUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockBrandUseCaseMockRecorder
}

// MockBrandUseCaseMockRecorder is the mock recorder for MockBrandUseCase.
type MockBrandUseCaseMockRecorder struct {
	mock *MockBrandUseCase
}

// NewMockBrandUseCase creates a new mock instance.
func NewMockBrandUseCase(ctrl *gomock.Controller) *MockBrandUseCase {
	mock := &MockBrandUseCase{ctrl: ctrl}
	mock.recorder = &MockBrandUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBrandUseCase) EXPECT() *MockBrandUseCaseMockRecorder {
	return m.recorder
}

// AddBrand mocks base method.
func (m *MockBrandUseCase) AddBrand(Brand models.AddBrand) (domain.Brand, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddBrand", Brand)
	ret0, _ := ret[0].(domain.Brand)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddBrand indicates an expected call of AddBrand.
func (mr *MockBrandUseCaseMockRecorder) AddBrand(Brand interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddBrand", reflect.TypeOf((*MockBrandUseCase)(nil).AddBrand), Brand)
}

// DeleteBrand mocks base method.
func (m *MockBrandUseCase) DeleteBrand(id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBrand", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteBrand indicates an expected call of DeleteBrand.
func (mr *MockBrandUseCaseMockRecorder) DeleteBrand(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBrand", reflect.TypeOf((*MockBrandUseCase)(nil).DeleteBrand), id)
}

// EditBrand mocks base method.
func (m *MockBrandUseCase) EditBrand(EditBrand models.EditBrand, id int) (domain.Brand, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditBrand", EditBrand, id)
	ret0, _ := ret[0].(domain.Brand)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EditBrand indicates an expected call of EditBrand.
func (mr *MockBrandUseCaseMockRecorder) EditBrand(EditBrand, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditBrand", reflect.TypeOf((*MockBrandUseCase)(nil).EditBrand), EditBrand, id)
}

// FilterByBrand mocks base method.
func (m *MockBrandUseCase) FilterByBrand(BrandID, page, per_product int) ([]models.FilterByBrandResponse, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FilterByBrand", BrandID, page, per_product)
	ret0, _ := ret[0].([]models.FilterByBrandResponse)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FilterByBrand indicates an expected call of FilterByBrand.
func (mr *MockBrandUseCaseMockRecorder) FilterByBrand(BrandID, page, per_product interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilterByBrand", reflect.TypeOf((*MockBrandUseCase)(nil).FilterByBrand), BrandID, page, per_product)
}

// ListBrands mocks base method.
func (m *MockBrandUseCase) ListBrands() ([]domain.Brand, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBrands")
	ret0, _ := ret[0].([]domain.Brand)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBrands indicates an expected call of ListBrands.
func (mr *MockBrandUseCaseMockRecorder) ListBrands() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBrands", reflect.TypeOf((*MockBrandUseCase)(nil).ListBrands))
}
