// Code generated by MockGen. DO NOT EDIT.
// Source: C:\Users\ahdaa\GOLANG\Leuse_Ecommerce\pkg\usecase\interface\order.go

// Package mock_interfaces is a generated GoMock package.
package mock_interfaces

import (
	reflect "reflect"

	domain "github.com/ahdaan98/pkg/domain"
	models "github.com/ahdaan98/pkg/utils/models"
	gomock "github.com/golang/mock/gomock"
	gofpdf "github.com/jung-kurt/gofpdf"
)

// MockOrderUseCase is a mock of OrderUseCase interface.
type MockOrderUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockOrderUseCaseMockRecorder
}

// MockOrderUseCaseMockRecorder is the mock recorder for MockOrderUseCase.
type MockOrderUseCaseMockRecorder struct {
	mock *MockOrderUseCase
}

// NewMockOrderUseCase creates a new mock instance.
func NewMockOrderUseCase(ctrl *gomock.Controller) *MockOrderUseCase {
	mock := &MockOrderUseCase{ctrl: ctrl}
	mock.recorder = &MockOrderUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrderUseCase) EXPECT() *MockOrderUseCaseMockRecorder {
	return m.recorder
}

// CancelOrder mocks base method.
func (m *MockOrderUseCase) CancelOrder(orderId int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelOrder", orderId)
	ret0, _ := ret[0].(error)
	return ret0
}

// CancelOrder indicates an expected call of CancelOrder.
func (mr *MockOrderUseCaseMockRecorder) CancelOrder(orderId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelOrder", reflect.TypeOf((*MockOrderUseCase)(nil).CancelOrder), orderId)
}

// GetAdminOrders mocks base method.
func (m *MockOrderUseCase) GetAdminOrders(page int) ([]models.CombinedOrderDetails, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAdminOrders", page)
	ret0, _ := ret[0].([]models.CombinedOrderDetails)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAdminOrders indicates an expected call of GetAdminOrders.
func (mr *MockOrderUseCaseMockRecorder) GetAdminOrders(page interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAdminOrders", reflect.TypeOf((*MockOrderUseCase)(nil).GetAdminOrders), page)
}

// GetAllOrders mocks base method.
func (m *MockOrderUseCase) GetAllOrders(userId, page, pageSize int) ([]models.OrderDetails, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllOrders", userId, page, pageSize)
	ret0, _ := ret[0].([]models.OrderDetails)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllOrders indicates an expected call of GetAllOrders.
func (mr *MockOrderUseCaseMockRecorder) GetAllOrders(userId, page, pageSize interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllOrders", reflect.TypeOf((*MockOrderUseCase)(nil).GetAllOrders), userId, page, pageSize)
}

// GetOrders mocks base method.
func (m *MockOrderUseCase) GetOrders(orderId int) (domain.OrderResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrders", orderId)
	ret0, _ := ret[0].(domain.OrderResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrders indicates an expected call of GetOrders.
func (mr *MockOrderUseCaseMockRecorder) GetOrders(orderId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrders", reflect.TypeOf((*MockOrderUseCase)(nil).GetOrders), orderId)
}

// OrderItemsFromCart mocks base method.
func (m *MockOrderUseCase) OrderItemsFromCart(userid, addressid, paymentid, couponid int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OrderItemsFromCart", userid, addressid, paymentid, couponid)
	ret0, _ := ret[0].(error)
	return ret0
}

// OrderItemsFromCart indicates an expected call of OrderItemsFromCart.
func (mr *MockOrderUseCaseMockRecorder) OrderItemsFromCart(userid, addressid, paymentid, couponid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OrderItemsFromCart", reflect.TypeOf((*MockOrderUseCase)(nil).OrderItemsFromCart), userid, addressid, paymentid, couponid)
}

// OrdersStatus mocks base method.
func (m *MockOrderUseCase) OrdersStatus(orderId int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OrdersStatus", orderId)
	ret0, _ := ret[0].(error)
	return ret0
}

// OrdersStatus indicates an expected call of OrdersStatus.
func (mr *MockOrderUseCaseMockRecorder) OrdersStatus(orderId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OrdersStatus", reflect.TypeOf((*MockOrderUseCase)(nil).OrdersStatus), orderId)
}

// PaymentMethodID mocks base method.
func (m *MockOrderUseCase) PaymentMethodID(order_id int) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PaymentMethodID", order_id)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PaymentMethodID indicates an expected call of PaymentMethodID.
func (mr *MockOrderUseCaseMockRecorder) PaymentMethodID(order_id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PaymentMethodID", reflect.TypeOf((*MockOrderUseCase)(nil).PaymentMethodID), order_id)
}

// PrintInvoice mocks base method.
func (m *MockOrderUseCase) PrintInvoice(orderIdInt int) (*gofpdf.Fpdf, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PrintInvoice", orderIdInt)
	ret0, _ := ret[0].(*gofpdf.Fpdf)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PrintInvoice indicates an expected call of PrintInvoice.
func (mr *MockOrderUseCaseMockRecorder) PrintInvoice(orderIdInt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrintInvoice", reflect.TypeOf((*MockOrderUseCase)(nil).PrintInvoice), orderIdInt)
}

// ReturnOrder mocks base method.
func (m *MockOrderUseCase) ReturnOrder(orderID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReturnOrder", orderID)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReturnOrder indicates an expected call of ReturnOrder.
func (mr *MockOrderUseCaseMockRecorder) ReturnOrder(orderID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReturnOrder", reflect.TypeOf((*MockOrderUseCase)(nil).ReturnOrder), orderID)
}
