// Code generated by MockGen. DO NOT EDIT.
// Source: C:\Users\ahdaa\GOLANG\Leuse_Ecommerce\pkg\usecase\interface\user.go

// Package mock_interfaces is a generated GoMock package.
package mock_interfaces

import (
	reflect "reflect"

	domain "github.com/ahdaan98/pkg/domain"
	models "github.com/ahdaan98/pkg/utils/models"
	gomock "github.com/golang/mock/gomock"
)

// MockUserUseCase is a mock of UserUseCase interface.
type MockUserUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockUserUseCaseMockRecorder
}

// MockUserUseCaseMockRecorder is the mock recorder for MockUserUseCase.
type MockUserUseCaseMockRecorder struct {
	mock *MockUserUseCase
}

// NewMockUserUseCase creates a new mock instance.
func NewMockUserUseCase(ctrl *gomock.Controller) *MockUserUseCase {
	mock := &MockUserUseCase{ctrl: ctrl}
	mock.recorder = &MockUserUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserUseCase) EXPECT() *MockUserUseCaseMockRecorder {
	return m.recorder
}

// AddAddress mocks base method.
func (m *MockUserUseCase) AddAddress(id int, address models.AddAddress) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddAddress", id, address)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddAddress indicates an expected call of AddAddress.
func (mr *MockUserUseCaseMockRecorder) AddAddress(id, address interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddAddress", reflect.TypeOf((*MockUserUseCase)(nil).AddAddress), id, address)
}

// ChangePassword mocks base method.
func (m *MockUserUseCase) ChangePassword(id int, old, password, repassword string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangePassword", id, old, password, repassword)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChangePassword indicates an expected call of ChangePassword.
func (mr *MockUserUseCaseMockRecorder) ChangePassword(id, old, password, repassword interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangePassword", reflect.TypeOf((*MockUserUseCase)(nil).ChangePassword), id, old, password, repassword)
}

// CheckUserExistByEmail mocks base method.
func (m *MockUserUseCase) CheckUserExistByEmail(email string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckUserExistByEmail", email)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckUserExistByEmail indicates an expected call of CheckUserExistByEmail.
func (mr *MockUserUseCaseMockRecorder) CheckUserExistByEmail(email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckUserExistByEmail", reflect.TypeOf((*MockUserUseCase)(nil).CheckUserExistByEmail), email)
}

// EditProfile mocks base method.
func (m *MockUserUseCase) EditProfile(details models.EditUserDetails, id int) (models.UserDetailsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditProfile", details, id)
	ret0, _ := ret[0].(models.UserDetailsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EditProfile indicates an expected call of EditProfile.
func (mr *MockUserUseCaseMockRecorder) EditProfile(details, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditProfile", reflect.TypeOf((*MockUserUseCase)(nil).EditProfile), details, id)
}

// GetAddresses mocks base method.
func (m *MockUserUseCase) GetAddresses(id int) ([]domain.Address, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAddresses", id)
	ret0, _ := ret[0].([]domain.Address)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAddresses indicates an expected call of GetAddresses.
func (mr *MockUserUseCaseMockRecorder) GetAddresses(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAddresses", reflect.TypeOf((*MockUserUseCase)(nil).GetAddresses), id)
}

// GetCart mocks base method.
func (m *MockUserUseCase) GetCart(id int) (models.GetCartResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCart", id)
	ret0, _ := ret[0].(models.GetCartResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCart indicates an expected call of GetCart.
func (mr *MockUserUseCaseMockRecorder) GetCart(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCart", reflect.TypeOf((*MockUserUseCase)(nil).GetCart), id)
}

// RemoveFromCart mocks base method.
func (m *MockUserUseCase) RemoveFromCart(userID, inventory int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveFromCart", userID, inventory)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveFromCart indicates an expected call of RemoveFromCart.
func (mr *MockUserUseCaseMockRecorder) RemoveFromCart(userID, inventory interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveFromCart", reflect.TypeOf((*MockUserUseCase)(nil).RemoveFromCart), userID, inventory)
}

// UpdateQuantity mocks base method.
func (m *MockUserUseCase) UpdateQuantity(id, inv_id, qty int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateQuantity", id, inv_id, qty)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateQuantity indicates an expected call of UpdateQuantity.
func (mr *MockUserUseCaseMockRecorder) UpdateQuantity(id, inv_id, qty interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateQuantity", reflect.TypeOf((*MockUserUseCase)(nil).UpdateQuantity), id, inv_id, qty)
}

// UserLogin mocks base method.
func (m *MockUserUseCase) UserLogin(user models.UserLogin) (models.TokenUsers, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserLogin", user)
	ret0, _ := ret[0].(models.TokenUsers)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserLogin indicates an expected call of UserLogin.
func (mr *MockUserUseCaseMockRecorder) UserLogin(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserLogin", reflect.TypeOf((*MockUserUseCase)(nil).UserLogin), user)
}

// UserProfile mocks base method.
func (m *MockUserUseCase) UserProfile(id int) (models.UserDetailsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserProfile", id)
	ret0, _ := ret[0].(models.UserDetailsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserProfile indicates an expected call of UserProfile.
func (mr *MockUserUseCaseMockRecorder) UserProfile(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserProfile", reflect.TypeOf((*MockUserUseCase)(nil).UserProfile), id)
}

// UserSignUp mocks base method.
func (m *MockUserUseCase) UserSignUp(user models.UserSignUp) (models.TokenUsers, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserSignUp", user)
	ret0, _ := ret[0].(models.TokenUsers)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserSignUp indicates an expected call of UserSignUp.
func (mr *MockUserUseCaseMockRecorder) UserSignUp(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserSignUp", reflect.TypeOf((*MockUserUseCase)(nil).UserSignUp), user)
}

// ValidatingDetails mocks base method.
func (m *MockUserUseCase) ValidatingDetails(arg0 models.UserSignUp) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidatingDetails", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidatingDetails indicates an expected call of ValidatingDetails.
func (mr *MockUserUseCaseMockRecorder) ValidatingDetails(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidatingDetails", reflect.TypeOf((*MockUserUseCase)(nil).ValidatingDetails), arg0)
}
