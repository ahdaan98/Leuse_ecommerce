// Code generated by MockGen. DO NOT EDIT.
// Source: C:\Users\ahdaa\GOLANG\Leuse_Ecommerce\pkg\usecase\interface\category.go

// Package mock_interfaces is a generated GoMock package.
package mock_interfaces

import (
	reflect "reflect"

	domain "github.com/ahdaan98/pkg/domain"
	models "github.com/ahdaan98/pkg/utils/models"
	gomock "github.com/golang/mock/gomock"
)

// MockCategoryUseCase is a mock of CategoryUseCase interface.
type MockCategoryUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockCategoryUseCaseMockRecorder
}

// MockCategoryUseCaseMockRecorder is the mock recorder for MockCategoryUseCase.
type MockCategoryUseCaseMockRecorder struct {
	mock *MockCategoryUseCase
}

// NewMockCategoryUseCase creates a new mock instance.
func NewMockCategoryUseCase(ctrl *gomock.Controller) *MockCategoryUseCase {
	mock := &MockCategoryUseCase{ctrl: ctrl}
	mock.recorder = &MockCategoryUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCategoryUseCase) EXPECT() *MockCategoryUseCaseMockRecorder {
	return m.recorder
}

// AddCategory mocks base method.
func (m *MockCategoryUseCase) AddCategory(category models.AddCategory) (domain.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddCategory", category)
	ret0, _ := ret[0].(domain.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddCategory indicates an expected call of AddCategory.
func (mr *MockCategoryUseCaseMockRecorder) AddCategory(category interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCategory", reflect.TypeOf((*MockCategoryUseCase)(nil).AddCategory), category)
}

// DeleteCategory mocks base method.
func (m *MockCategoryUseCase) DeleteCategory(id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCategory", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCategory indicates an expected call of DeleteCategory.
func (mr *MockCategoryUseCaseMockRecorder) DeleteCategory(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCategory", reflect.TypeOf((*MockCategoryUseCase)(nil).DeleteCategory), id)
}

// EditCategory mocks base method.
func (m *MockCategoryUseCase) EditCategory(EditCategory models.EditCategory, id int) (domain.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditCategory", EditCategory, id)
	ret0, _ := ret[0].(domain.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EditCategory indicates an expected call of EditCategory.
func (mr *MockCategoryUseCaseMockRecorder) EditCategory(EditCategory, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditCategory", reflect.TypeOf((*MockCategoryUseCase)(nil).EditCategory), EditCategory, id)
}

// FilterByCategory mocks base method.
func (m *MockCategoryUseCase) FilterByCategory(categoryID, page, per_product int) ([]models.FilterByCategoryResponse, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FilterByCategory", categoryID, page, per_product)
	ret0, _ := ret[0].([]models.FilterByCategoryResponse)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FilterByCategory indicates an expected call of FilterByCategory.
func (mr *MockCategoryUseCaseMockRecorder) FilterByCategory(categoryID, page, per_product interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilterByCategory", reflect.TypeOf((*MockCategoryUseCase)(nil).FilterByCategory), categoryID, page, per_product)
}

// ListCategories mocks base method.
func (m *MockCategoryUseCase) ListCategories() ([]domain.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCategories")
	ret0, _ := ret[0].([]domain.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCategories indicates an expected call of ListCategories.
func (mr *MockCategoryUseCaseMockRecorder) ListCategories() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCategories", reflect.TypeOf((*MockCategoryUseCase)(nil).ListCategories))
}
